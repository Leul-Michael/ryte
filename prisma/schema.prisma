// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(BASIC)

  stories   Story[]
  likes     Like[]
  followers User[]    @relation(name: "Followers")
  follows   User[]    @relation(name: "Followers")
  comments  Comment[]
  tags      Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Story {
  id String @id @default(cuid())

  title       String
  description String
  thumbnail   String?
  content     String
  slug        String  @unique

  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags     Tag[]
  likes    Like[]
  comments Comment[]

  min_read Int

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
}

model Like {
  userId  String
  storyId String
  user    User   @relation(fields: [userId], references: [id])
  story   Story  @relation(fields: [storyId], references: [id])

  @@id([userId, storyId])
}

model Comment {
  id String @id @default(cuid())

  comment String
  userId  String
  storyId String
  user    User   @relation(fields: [userId], references: [id])
  story   Story  @relation(fields: [storyId], references: [id])

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
}

model Tag {
  id String @id @default(cuid())

  title     String   @unique
  ct        String[]
  stories   Story[]
  followers User[]

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
}

enum Role {
  BASIC
  ADMIN
}
